#!/usr/bin/env ruby

# image declares container artifacts
@bootstrap = image {
  stage "bootstrap", "ubuntu:focal-20200606"

  command("USER") {
    "root"
  }

  env "DEBIAN_FRONTEND" => "noninteractive",
      "LC_ALL" => "C.UTF-8",
      "LANG" => "en_US",
      "LANGUAGE" => "en_US",
      "ACCEPT_EULA" => "y"

  apt %w{locales locales-all}

  run %q{locale-gen --purge en_US}
  run %q{/bin/echo -e "LANG=$LANG\nLANGUAGE=$LANGUAGE\n" | tee /etc/default/locale}
  run %q{locale-gen $LANGUAGE}
  run %q{dpkg-reconfigure locales}

  apt %w{git curl apt-transport-https aptitude ca-certificates apt-utils software-properties-common docker.io build-essential libyaml-dev ruby2* libruby2* ruby-bundler rubygems-integration rake amazon-ecr-credential-helper}

  run %q{curl -s -v -Lo seabolt-1.7.4-Linux-ubuntu-18.04.deb https://github.com/neo4j-drivers/seabolt/releases/download/v1.7.4/seabolt-1.7.4-Linux-ubuntu-18.04.deb}
  run %q{dpkg -i seabolt-1.7.4-Linux-ubuntu-18.04.deb}


  ##TODO: ppa module / extra repo module
  #run %q{curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add}
  #run %q{apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"}
  #apt %w{kubectl}

  #TODO: ???
  run %q{groupadd --gid 134 abc-otf}
  run %q{groupadd --gid 999 efg-nnn}
  run %q{useradd --uid 1000 --home-dir /home/app --create-home --shell /bin/bash app --groups docker,abc-otf,efg-nnn}

  run %q{mkdir -p /home/app/current}
  run %q{chown -R app /home/app}

  #TODO: workdir module
  command("WORKDIR") {
    "/home/app/current"
  }
}

@deploy = image {
  stage "deploy", @bootstrap.stage
  #TODO: user module
  command("USER") {
    "app"
  }

  command("COPY") {
    "--chown=app Gemfile Gemfile.lock /home/app/current/"
  }

  ##TODO: this is hacked
  #run %q{ln -sfv /home/app/polly/bin/polly /usr/local/bin/polly}

  run %q{bundle config set --local path /home/app/vendor/bundle}
  run %q{bundle config set --local jobs 4}
  run %q{bundle config set --local retry 3}
  #run %q{bundle config set --local deploment true}
  #run %q{bundle config set --local without development}
  run %q{bundle install}

  command("COPY") {
    "--chown=app . /home/app/current"
  }
}

#@test = image {
#  stage "test", @deploy.stage
#
#  #TODO: user module
#  command("USER") {
#    "app"
#  }
#
#  #TODO: workdir module
#  command("WORKDIR") {
#    "/home/app/current"
#  }
#
#  run %q{bundle config set --local path /home/app/vendor/bundle}
#  run %q{bundle config set --local jobs 4}
#  run %q{bundle config set --local retry 3}
#  run %q{bundle config set --local deploment true}
#  run %q{bundle config unset --local without}
#  run %q{bundle config set --local with development}
#  run %q{bundle install}
#
#  ##run %q{bundle install --path=~/vendor/bundle --jobs=4 --retry=3 --deployment --with "development"}
#  ##run %q{ssh-add -l}
#  #run %q{kubectl config set-context polly-ci}
#  #run %q{kubectl config use-context polly-ci}
#}

#@plain_workflow = Plan.new
##@plain_workflow.add_circleci_job("bootstrap-5", [{"image"=>@bootstrap.from, "user"=> "root"}], [{"run"=>{"name"=>"sleep-5", "command"=>"sleep 5"}}], {}, "/")
##@plain_workflow.add_circleci_job("bootstrap-30", [{"image"=>@bootstrap.from, "user"=> "root"}], [{"run"=>{"name"=>"sleep-30", "command"=>"sleep 30"}}], {}, "/")
##@plain_workflow.add_circleci_job("bootstrap-60", [{"image"=>@bootstrap.from, "user"=> "root"}], [{"run"=>{"name"=>"sleep-60", "command"=>"sleep 60"}}], {}, "/")
#@plain_workflow.add_circleci_job("bootstrap", [{"image"=>@bootstrap.from, "user"=> "root"}], [{"run"=>{"name"=>"bootstrap", "command"=>"
#id app || (#{@bootstrap.command_list.join("; ")})
#chown -R app /home/app
#su app -s /bin/test -- -w $SSH_AUTH_SOCK || (chmod g+w $SSH_AUTH_SOCK && chgrp 1000 $SSH_AUTH_SOCK && chgrp 1000 $(dirname $SSH_AUTH_SOCK) && chmod g+x $(dirname $SSH_AUTH_SOCK) && su app -s /bin/test -- -w $SSH_AUTH_SOCK)
#test -z $DOCKER_CERT_PATH || (chown -R 1000 $(dirname $DOCKER_CERT_PATH))
#su app -s /bin/bash -c '#{@deploy.command_list.join(" && ")}'
#su app -w SSH_AUTH_SOCK,DOCKER_CERT_PATH,DOCKER_HOST,DOCKER_MACHINE_NAME,DOCKER_TLS_VERIFY,NO_PROXY -s /usr/local/bin/polly -- build
#docker run --rm=true polly:latest bundle exec rspec
#"}}], {}, "/home/app/polly") #TODO: workingdir module
